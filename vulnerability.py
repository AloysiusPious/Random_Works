import socket
import csv
from prettytable import PrettyTable

# Dictionary mapping common ports to vulnerabilities
vulnerabilities = {
    80: "HTTP (Hypertext Transfer Protocol) - Used for unencrypted web traffic",
    443: "HTTPS (HTTP Secure) - Used for encrypted web traffic",
    22: "SSH (Secure Shell) - Used for secure remote access",
    21: "FTP (File Transfer Protocol) - Used for file transfers",
    25: "SMTP (Simple Mail Transfer Protocol) - Used for email transmission",
    23: "Telnet - Used for remote terminal access",
    53: "DNS (Domain Name System) - Used for domain name resolution",
    110: "POP3 (Post Office Protocol version 3) - Used for email retrieval",
    143: "IMAP (Internet Message Access Protocol) - Used for email retrieval",
    3306: "MySQL - Used for MySQL database access",
    3389: "RDP (Remote Desktop Protocol) - Used for remote desktop connections (Windows)",
    8080: "HTTP Alternate - Commonly used as a secondary HTTP port",
    8000: "HTTP Alternate - Commonly used as a secondary HTTP port",
    8443: "HTTPS Alternate - Commonly used as a secondary HTTPS port",
    5900: "VNC (Virtual Network Computing) - Used for remote desktop access",
    # Add more ports and vulnerabilities as needed
}

# Dictionary mapping common ports to predefined comments
comments = {
    80: "Justification required: This port is commonly used for unencrypted web traffic. Please provide justification for its necessity to ensure proper security measures are in place.",
    443: "Valid port: does not require additional action.",
    22: "Valid port: does not require additional action.",
    21: "Valid port: does not require additional action.",
    25: "Valid port: does not require additional action.",
    23: "Justification required: This port is commonly used for unencrypted remote terminal access (Telnet), which poses security risks. Consider using port 22 (SSH) for secure remote access instead.",
    53: "Valid port: does not require additional action.",
    110: "Valid port: does not require additional action.",
    143: "Valid port: does not require additional action.",
    3306: "Valid port: does not require additional action.",
    3389: "Valid port: does not require additional action.",
    8080: "Justification required: This port is commonly used for unencrypted web traffic. Please provide justification for its necessity to ensure proper security measures are in place.",
    8000: "Justification required: This port is commonly used for unencrypted web traffic. Please provide justification for its necessity to ensure proper security measures are in place.",
    8443: "Valid port: does not require additional action.",
    5900: "Valid port: does not require additional action.",
    # Add more ports and comments as needed
}

def display_table(open_ports):
    table = PrettyTable(["Open Port", "Vulnerability", "Comment"])
    for port in open_ports:
        vulnerability = vulnerabilities.get(port, "No known vulnerabilities associated with common services")
        comment = comments.get(port, "No predefined comment available")
        table.add_row([port, vulnerability, comment])
    print(table)

def scan_top_ports(target):
    open_ports = []
    top_ports = [21, 22, 23, 25, 53, 80, 110, 143, 443, 3306, 3389, 5900, 8000, 8080, 8443]  # Top 15 ports
    for port in top_ports:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)  # Adjust timeout as needed
            result = sock.connect_ex((target, port))
            if result == 0:
                open_ports.append(port)
            sock.close()
        except KeyboardInterrupt:
            sys.exit()
        except socket.error:
            pass
    return open_ports

def main():
    with open('URL_Info.csv', 'r') as file:
        urls = []
        for line in file:
            # Check if the line starts with a comment character (#)
            if not line.startswith('#'):
                url, owner = line.strip().split(',')  # Assuming URL and owner are comma-separated
                urls.append((url.strip(), owner.strip()))  # Remove trailing newline character

    with open('output.csv', 'w', newline='') as csvfile:
        fieldnames = ['Application URL', 'Open Port', 'Owner', 'Vulnerability', 'Comment']  # Updated fieldnames
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()

        for url, owner in urls:
            open_ports = scan_top_ports(url)
            if not open_ports:
                print(f"No open ports found on {url}.")
            else:
                print(f"Open ports, vulnerabilities, and comments for {url}:")
                display_table(open_ports)
                for port in open_ports:
                    vulnerability = vulnerabilities.get(port, "No known vulnerabilities associated with common services")
                    comment = comments.get(port, "No predefined comment available")
                    writer.writerow({'Application URL': url, 'Open Port': port, 'Owner': owner, 'Vulnerability': vulnerability, 'Comment': comment})

    print("Scanning and CSV creation completed.")

if __name__ == "__main__":
    main()